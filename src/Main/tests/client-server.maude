
--- simple client-server model from the following paper:
--- Jos√© Meseguer, The Temporal Logic of Rewriting: A Gentle Introduction, LNCS 5065, 2008

mod CLIENT-SERVER is
    protecting NAT .
    sorts Oid Nat? Cnts Conf .
    subsort Nat < Nat? .
    subsort Cnts < Conf .

    op nil : -> Nat? [ctor] .
    ops a b c : -> Oid [ctor] .
    op f : Oid Oid Nat -> Nat [ctor] .
    op `{_`,_`} : Oid Nat -> Cnts [ctor] .

    op _<-_ : Oid Cnts -> Conf [ctor] .
    op `[_`] : Oid -> Conf [ctor] .
    op `[_`,_`,_`,_`] : Oid Oid Nat Nat? -> Conf [ctor] .

    op null : -> Conf [ctor] .
    op __ : Conf Conf -> Conf [ctor assoc comm id: null] .

    vars C S I : Oid .  vars N M : Nat .
    var W : Nat? .  var CNT : Cnts . 

    --- The followings are the rewriting rules to describe the behaviour
    --- of this system. The localized fairness for this model is specified
    --- in the metadata rule attributes.

    --- weak fairness localized to the variable C
    rl [req] : [C,S,N,nil] => [C,S,N,nil] (S <- {C,N}) 
         [metadata "just(C)"] .  

    --- strong fairness localized to the variables S and C
    rl [reply] : (S <- {C,N}) [S] => [S] (C <- {S,f(S,C,N)}) 
         [metadata "fair(S,C)"] .  

    --- strong fairness localized to the variable C. In addition,
    --- the item "rec" is specified to use the action of the form "rec".
    rl [rec] : (C <- {S,M}) [C,S,N,W] => [C,S,N,M] [metadata "rec; fair(C)"] .

    rl [dupl] : (I <- CNT) => (I <- CNT) (I <- CNT)  .
    rl [loss] : I <- CNT => null  .
endm

---(
In order to use LTLR model-checker commands, we first need to
load the ltlr-interface.maude file, and then define a module
in Full-Maude that includes both the original module M and SATISFACTION.
Here, we can also include CONTEXT[M] instead of M in order to use
the context information in the action pattern.

The new module in Full Maude should define a state sort 
(and a state context sort if CONTEXT[M] was used). If a state sort in the
original module is TOP, then the new module should include:

subsort TOP < State .
subsort TOP < Context$TOP < StateContext . --- only if CONTEXT[M] used.

After then, we can freely define extra state/event propositions.
---)

--- Full-Maude interface for LTLR model checknig under parameterized fairness
load ltlr-interface

(mod CLIENT-SERVER-CHECK is
  inc CONTEXT[CLIENT-SERVER] .  --- to use the context info
  pr SATISFACTION .

  subsort Conf < State .
  subsort Context$Conf < StateContext .

  op init : -> State .
  eq init = [a] [b,a,1,nil] [c,a,0,nil] . 

  var CNT : Cnts .  var CF : Conf .
  vars C S I : Oid .  vars N M : Nat .  var W : Nat? . 

  *** abstraction
  eq (I <- CNT) (I <- CNT) = (I <- CNT) .
  *** extra rules below added by coherence completion
  rl [reply] : (S <-{C,N}) [S] => (S <-{C,N}) [S] (C <-{S,f(S,C,N)}) .
  rl [rec] : (C <- {S,M}) [C,S,N,W] => (C <- {S,M}) [C,S,N,M] .
  rl [loss] : I <- CNT => I <- CNT .


  ops proc-req received : Oid -> Prop .
  eq (S <-{C,N}) CF |= proc-req(C) = true .
  eq [C,S,N,M] CF |= received(C) = true .
endm)

set verbose on .

(mc [a] [b,a,1,nil] |= [](proc-req(b) -> <> received(b)) .)
(mc [a] [b,a,1,nil] |= [](~ proc-req(b)) -> [](~ received(b)) .)


--- false. Note that the action pattern "rec" is defined by the rule attribute.
(mc init |= <> rec .)

--- false. (only for ground weak fairness)
(mc init |= <> rec under
    (just : enabled(req(b)) => req(b)) ;
    (just : enabled(req(c)) => req(c)) ;
    (just : enabled(reply(a,b)) => reply(a,b)) ;
    (just : enabled(reply(a,c)) => reply(a,c)) ;
    (just : enabled(rec(b)) => rec(b)) ;
    (just : enabled(rec(c)) => rec(c))
.)

--- true. (ground weak and strong fairness)
(mc init |= <> rec under
    (just : enabled(req(b)) => req(b)) ;
    (fair : enabled(reply(a,b)) => reply(a,b)) ;
    (fair : enabled(rec(b)) => rec(b))
.)

--- true. (under strong/weak localized fairness)
(pfmc init |= <> rec .)

